
if (MQTT_SUPPORT)
	aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/mqtt MQTT_SRC)
	set(PROTOCOL_SRC ${PROTOCOL_SRC} ${MQTT_SRC})
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/mqtt/mosquitto_api.h)
	INCLUDE_DIRECTORIES(${INC_PATH}/mosquitto)
endif()


if (HTTP_SUPPORT)
	aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/http HTTP_SRC)
	set(PROTOCOL_SRC ${PROTOCOL_SRC} ${HTTP_SRC})
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/http/http_client.h)
endif()

if (MODBUS_SUPPORT)
	aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/modbus MODBUS_SRC)
	set(PROTOCOL_SRC ${PROTOCOL_SRC} ${MODBUS_SRC})
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/modbus/modbus_api.h)
	INCLUDE_DIRECTORIES(${INC_PATH}/modbus)
endif()

if(PKG_PROTO MATCHES "protobuf")
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/nanopb)
	aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/nanopb NANOPB_SRC)
	set(PROTOCOL_SRC ${PROTOCOL_SRC} ${NANOPB_SRC})
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/nanopb/pb.h)
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/nanopb/pb_encode.h)
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/nanopb/pb_decode.h)
elseif(PKG_PROTO MATCHES "tlv")
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/tlv)
	aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/tlv TLV_SRC)
	set(PROTOCOL_SRC ${PROTOCOL_SRC} ${TLV_SRC})
	set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/tlv/tlv.h)
elseif(PKG_PROTO MATCHES "json")
endif()

aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/cjson CJSON_SRC)
set(PROTOCOL_SRC ${PROTOCOL_SRC} ${CJSON_SRC})
set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/cjson/cJSON.h)
set(EX_HEAD_FILE ${EX_HEAD_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/cjson/cJSON.h)

add_library(protocol SHARED ${PROTOCOL_SRC})

SET_TARGET_PROPERTIES(protocol PROPERTIES VERSION ${SW_VERSION} SOVERSION 1)

INSTALL(TARGETS protocol LIBRARY DESTINATION lib)
INSTALL(FILES ${EX_HEAD_FILE} DESTINATION ${INC_PATH}/protocol)




